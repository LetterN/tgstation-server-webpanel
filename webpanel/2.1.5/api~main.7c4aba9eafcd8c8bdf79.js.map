{"version":3,"sources":["webpack:///./src/ApiClient/ServerClient.ts","webpack:///./src/ApiClient/generatedcode/_enums.ts","webpack:///./src/ApiClient/util/CredentialsProvider.ts","webpack:///./src/ApiClient/util/ConfigController.ts","webpack:///./src/ApiClient/util/config.ts","webpack:///./src/ApiClient/models/InternalComms/InternalStatus.ts","webpack:///./src/ApiClient/util/LoginHooks.ts","webpack:///./src/ApiClient/JobsClient.ts","webpack:///./src/ApiClient/util/JobsController.ts","webpack:///./src/ApiClient/UserClient.ts","webpack:///./src/ApiClient/models/ICredentials.ts","webpack:///./src/ApiClient/models/InternalComms/InternalError.ts","webpack:///./src/ApiClient/InstancePermissionSetClient.ts"],"names":["apiClient","api","initialized","loadingServerInfo","_serverInfo","autoLogin","loggingIn","getServerInfo","bind","LoginHooks","addHook","on","undefined","CredentialsProvider","token","runHooks","configOptions","apipath","callback","console","log","initApi","then","catch","window","location","reload","time","defObj","default","this","OpenAPIClientAxios","definition","validate","axiosConfigDefaults","baseURL","value","withCredentials","headers","Accept","Api","API_VERSION","VERSION","validateStatus","status","ServerClient","globalHandledCodes","includes","init","interceptors","request","use","errorobj","InternalError","ErrorCode","NO_APIPATH","void","Promise","reject","url","tok","wait4Token","bearer","error","response","val","snowflake","code","err","AXIOS","jsError","res","errorMessage","data","HTTP_BAD_REQUEST","config","method","resolve","login","StatusCode","OK","client","ERROR","emit","logout","HTTP_ACCESS_DENIED","HTTP_NOT_ACCEPTABLE","HTTP_DATA_INEGRITY","HTTP_API_MISMATCH","HTTP_SERVER_ERROR","HTTP_UNIMPLEMENTED","setTimeout","UNHANDLED_GLOBAL_RESPONSE","axiosResponse","timeEnd","isTokenValid","newCreds","wait4Init","oauthAutoLogin","credentials","type","CredentialsType","OAuth","InternalStatus","LOGIN_NOCREDS","resolver","info","removeListener","Password","HomeController_CreateToken","OAuthProvider","auth","username","userName","password","provider","Authorization","stat","payload","LOGIN_FAIL","LOGIN_DISABLED","LOGIN_RATELIMIT","UNHANDLED_RESPONSE","_token","bypassCache","HomeController_Home","cache","TypedEmitter","AdministrationRights","ByondRights","ChatBotRights","ChatProvider","ConfigurationRights","ConfigurationType","DreamDaemonRights","DreamDaemonSecurity","DreamMakerRights","InstanceManagerRights","InstancePermissionSetRights","RemoteGitProvider","RepositoryRights","RightsType","WatchdogStatus","Object","values","getconfig","newconfig","entries","key","setconfig","option","deleteconfig","parseInt","Number","isNaN","localStorage","setItem","id","JSON","stringify","e","getItem","json","parse","removeItem","jobsWidgetOptions","githubtoken","DEFAULT_APIPATH","jobpollinactive","jobpollactive","jobswidgetdisplay","possibleValues","AUTO","args","freeze","assign","promiseHooks","Set","i","work","hook","name","push","all","add","delete","instanceid","JobController_Read","Instance","page","pageSize","content","jobid","JobController_GetId","JOB_JOB_NOT_FOUND","JobController_Delete","JOB_JOB_COMPLETE","_instance","setInstance","fastmodecount","currentLoop","Date","errors","jobs","Map","loop","reset","restartLoop","cycles","initDate","now","loopid","JobsClient","listActiveJobs","job","set","localids","Array","from","remoteids","map","manualids","filter","x","getJob","length","progress","progressedjob","canCancel","originalErrorMessage","errorCode","TGSErrorCode","InstanceOffline","reason","cancelRightsType","Administration","userInfo","UserClient","getCurrentUser","required","cancelRight","resolvePermissionSet","administrationRights","InstanceManager","instanceManagerRights","Byond","InstancePermissionSet","InstancePermissionSetClient","getCurrentInstancePermissionSet","byondRights","ChatBots","chatBotRights","Configuration","configurationRights","DreamDaemon","dreamDaemonRights","DreamMaker","dreamMakerRights","instancePermissionSetRights","Repository","repositoryRights","onError","get","stoppedAt","APP_FAIL","Error","deleteInfo","deleteJob","_cachedUser","loadingUserInfo","createAllUsersWithAA","newUser","UserController_Update","current","USER_NOT_FOUND","user","UserController_Read","thing","UserController_List","sort","a","b","UserController_GetId","newuser","enabled","perm","UserController_Create","USER_NO_SYS_IDENT","DescType","addon","origin","desc","extendedInfo","TEXT","message","additionalData","stack","debuginfo","replace","replaceAll","breakonerror","_cachedInstancePermissionSet","loadingInstancePermissionSetInfo","clear","has","InstancePermissionSetController_Read"],"mappings":"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AAAA,I,mDAAAA,I,qBAAAA,I,2BAAAA,I,mCAAAA,I,yDAAAA,I,6CAAAA,I,qDAAAA,I,mCAAAA,I,oDAAAA,I,oCAAAA,I,kCAAAA,I,8CAAAA,I,sDAAAA,I,4CAAAA,I,sCAAAA,I,sCAAAA,I,oDAAAA,I,oDAAAA,I,gDAAAA,I,0DAAAA,I,gDAAAA,I,oDAAAA,I,oDAAAA,I,8DAAAA,I,wDAAAA,I,oEAAAA,I,8DAAAA,I,oEAAAA,I,8BAAAA,I,wBAAAA,I,4BAAAA,I,8BAAAA,I,8DAAAA,I,wDAAAA,I,8DAAAA,I,oDAAAA,I,8DAAAA,I,gEAAAA,I,sCAAAA,I,wDAAAA,I,sDAAAA,I,0EAAAA,I,kDAAAA,I,oDAAAA,I,8DAAAA,I,4BAAAA,I,4CAAAA,I,sDAAAA,I,0CAAAA,I,wDAAAA,I,wDAAAA,I,8DAAAA,I,gFAAAA,I,sCAAAA,I,gDAAAA,I,4CAAAA,I,oEAAAA,I,4EAAAA,I,0EAAAA,I,0EAAAA,I,sEAAAA,I,sDAAAA,I,oDAAAA,I,kDAAAA,I,sCAAAA,I,8DAAAA,I,kDAAAA,I,oDAAAA,I,oEAAAA,I,0DAAAA,I,0CAAAA,I,wDAAAA,I,kDAAAA,I,gEAAAA,I,kDAAAA,I,oDAAAA,I,gDAAAA,I,0CAAAA,I,4CAAAA,I,4CAAAA,I,gDAAAA,I,4CAAAA,I,4BAAAA,I,gCAAAA,I,gCAAAA,I,4DAAAA,I,kEAAAA,I,4CAAAA,I,sCAAAA,I,0DAAAA,I,gEAAAA,I,wCAAAA,I,wCAAAA,I,gDAAAA,I,kDAAAA,I,0CAAAA,I,0DAAAA,I,0CAAAA,I,yCAAAA,I,oDAAAA,M,cAyGAmF,O,eAAAA,I,eAAAA,I,mBAAAA,I,mBAAAA,I,uBAAAA,I,0BAAAA,I,oBAAAA,I,gBAAAA,I,yCAAAA,I,mCAAAA,I,uCAAAA,I,2CAAAA,M,cAeAC,O,eAAAA,I,eAAAA,I,iBAAAA,I,oBAAAA,M,cAOA5B,K,gBAAAA,E,kBAAAA,E,oBAAAA,E,qBAAAA,M,cAOA6B,O,qBAAAA,I,mBAAAA,I,oBAAAA,M,cAMAC,O,eAAAA,I,+CAAAA,I,yBAAAA,I,mBAAAA,I,uCAAAA,I,gC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","file":"api~main.7c4aba9eafcd8c8bdf79.js","sourcesContent":["import { AxiosError, AxiosResponse, OpenAPIClientAxios } from \"openapi-client-axios\";\nimport { Document } from \"openapi-client-axios/types/client\";\nimport { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport { API_VERSION, VERSION } from \"../definitions/constants\";\nimport { Client, Components } from \"./generatedcode/_generated\";\nimport { CredentialsType, ICredentials } from \"./models/ICredentials\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport configOptions from \"./util/config\";\nimport CredentialsProvider from \"./util/CredentialsProvider\";\nimport LoginHooks from \"./util/LoginHooks\";\n\ninterface IEvents {\n    //self explainatory\n    logout: () => void;\n    //fired whenever something is denied access, shouldnt really be used\n    accessDenied: () => void;\n    //fired when the server info is first loaded\n    loadServerInfo: (\n        serverInfo: InternalStatus<Components.Schemas.ServerInformationResponse, ServerInfoErrors>\n    ) => void;\n    //fired when the api is loaded from the json file and loaded\n    initialized: () => void;\n    //purge all caches\n    purgeCache: () => void;\n    //internal event, queues logins\n    loadLoginInfo: (\n        loginInfo: InternalStatus<Components.Schemas.TokenResponse, LoginErrors>\n    ) => void;\n    //internal event fired for wait4Token(), external things should be using LoginHooks#LoginSuccess or a login hook\n    tokenAvailable: (token: Components.Schemas.TokenResponse) => void;\n}\n\nexport type LoginErrors =\n    | GenericErrors\n    | ErrorCode.LOGIN_DISABLED\n    | ErrorCode.LOGIN_FAIL\n    | ErrorCode.LOGIN_NOCREDS\n    | ErrorCode.LOGIN_BAD_OAUTH\n    | ErrorCode.LOGIN_RATELIMIT;\n\nexport type ServerInfoErrors = GenericErrors;\n\nexport default new (class ServerClient extends TypedEmitter<IEvents> {\n    private static readonly globalHandledCodes = [400, 401, 403, 406, 409, 426, 500, 501, 503];\n\n    //api\n    public apiClient?: Client; //client to interface with the api\n    private api?: OpenAPIClientAxios; //api object, handles sending requests and configuring things\n    private initialized = false;\n    private loadingServerInfo = false;\n\n    public constructor() {\n        super();\n        this.getServerInfo = this.getServerInfo.bind(this);\n\n        LoginHooks.addHook(this.getServerInfo);\n        this.on(\"purgeCache\", () => {\n            this._serverInfo = undefined;\n            if (CredentialsProvider.token) {\n                void LoginHooks.runHooks(CredentialsProvider.token);\n            }\n        });\n\n        //Why is this here? Because otherwise it creates an import loop, grrrrr\n        configOptions.apipath.callback = (): void => {\n            console.log(\"Reinitializing API\");\n            this.initApi()\n                .then(() => {\n                    console.log(\"API Reinitialized\");\n                })\n                .catch(() => {\n                    //The API failing to initialize is a big nono, start all over again.\n                    window.location.reload();\n                });\n        };\n    }\n\n    //serverInfo\n    private _serverInfo?: InternalStatus<\n        Components.Schemas.ServerInformationResponse,\n        ErrorCode.OK\n    >;\n\n    public get serverInfo() {\n        return this._serverInfo;\n    }\n\n    public autoLogin = true;\n    private loggingIn = false;\n\n    public async initApi() {\n        console.log(\"Initializing API client\");\n        console.time(\"APIInit\");\n        //Object is forced typecasted to Document because i really cant be assed to figure out why it doesn't accept the json\n        //The json is loaded with import to force webpack to bundle it alone\n        const defObj = ((await import(\"./generatedcode/swagger.json\"))\n            .default as unknown) as Document;\n\n        this.api = new OpenAPIClientAxios({\n            definition: defObj,\n            validate: false,\n            //Defaults for all requests sent by the apiClient, you may notice a lack of authorization headers,\n            // those are applied in the request interceptor\n            axiosConfigDefaults: {\n                //Yes this is only initialized once even if the configOption changes, this doesn't\n                baseURL: configOptions.apipath.value as string,\n                withCredentials: false,\n                headers: {\n                    Accept: \"application/json\",\n                    Api: `Tgstation.Server.Api/` + API_VERSION,\n                    \"User-Agent\": \"tgstation-server-control-panel/\" + VERSION\n                },\n                //Global errors are handled via the catch clause and endpoint specific response codes are handled normally\n                validateStatus: status => {\n                    return !ServerClient.globalHandledCodes.includes(status);\n                }\n            }\n        });\n        this.apiClient = await this.api.init<Client>();\n\n        //Oh lord here be shitcode, welcome to the land of interceptors, they as their name say\n        // intercept requests and changes them. It also intercepts responses and changes them\n        this.apiClient.interceptors.request.use(\n            async value => {\n                //Meta value that means theres no value, used in the github deployed version\n                if (configOptions.apipath.value === \"https://example.org:5000\") {\n                    const errorobj = new InternalError(ErrorCode.NO_APIPATH, {\n                        void: true\n                    });\n                    return Promise.reject(errorobj);\n                }\n\n                //This applies the authorization header, it will wait however long it needs until\n                // theres a token available. It obviously won't wait for a token before sending the request\n                // if its currently sending a request to the login endpoint...\n                if (!(value.url === \"/\" || value.url === \"\")) {\n                    const tok = await this.wait4Token();\n                    (value.headers as { [key: string]: string })[\"Authorization\"] =\n                        \"Bearer \" + tok.bearer;\n                }\n                return value;\n            },\n            error => {\n                return Promise.reject(error);\n            }\n        );\n\n        //I am sorry for what you will see before you, this is the response interceptor, it normalizes\n        // all the weird shit in the TGS api to make it *somewhat* easier to consume in the rest of the app\n        // onFulfilled here is a noop that returns its arguments because we only care to intercept errors\n        this.apiClient.interceptors.response.use(\n            val => val,\n            (error: AxiosError): Promise<AxiosResponse> => {\n                //THIS IS SNOWFLAKE KEKW\n                //As the above comment mentions, this shitcode is very snowflake\n                // it tries to typecast the \"response\" we got into an error then tries to check if that \"error\" is\n                // the snowflake no apipath github error, if it is, it rejects the promise to send it to the catch block\n                // all endpoints have which simply returns the error wrapped in a status object\n                const snowflake = (error as unknown) as InternalError<ErrorCode.NO_APIPATH>;\n                if (snowflake?.code === ErrorCode.NO_APIPATH) {\n                    return Promise.reject(snowflake);\n                }\n\n                //This was originally an else clause at the bottom but it made it hard to find\n                // if the promise rejected and its not because its a globally handled status code\n                // it means that axios created an error itself for an unknown reason(network failure,\n                // cors failure, user is navigating away, aborting requests, etc). Simply return the error\n                // as a globally handled error.\n                if (\n                    !(\n                        error.response &&\n                        error.response.status &&\n                        ServerClient.globalHandledCodes.includes(error.response.status)\n                    )\n                ) {\n                    const err = error as Error;\n                    const errorobj = new InternalError(\n                        ErrorCode.AXIOS,\n                        { jsError: err },\n                        error.response\n                    );\n                    return Promise.reject(errorobj);\n                }\n\n                //I am sorry, this is the bulk of the shitcode, its a massive switch that handles every single\n                // globally handled status code and sometimes not so globally because one endpoint decided it would be\n                const res = error.response as AxiosResponse<unknown>;\n                switch (error.response.status) {\n                    //Error code 400: Bad request, show message to user and instruct them to report it as its probably a bug\n                    case 400: {\n                        const errorMessage = res.data as Components.Schemas.ErrorMessageResponse;\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_BAD_REQUEST,\n                            {\n                                errorMessage\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    //Error code 401: Access Denied, fired whenever a token expires, in that case, attempt to reauthenticate\n                    // using the last known working credentials, if that succeeds, reissue the request, otherwise logout the\n                    // user and kick them to the login page. Snowflake behaviour: Acts as a failed login for the login endpoint\n                    case 401: {\n                        const request = error.config;\n                        if (\n                            (request.url === \"/\" || request.url === \"\") &&\n                            request.method === \"post\"\n                        ) {\n                            return Promise.resolve(error.response);\n                        }\n\n                        if (this.autoLogin) {\n                            return this.login().then(status => {\n                                switch (status.code) {\n                                    case StatusCode.OK: {\n                                        return this.api!.client.request(error.config);\n                                    }\n                                    case StatusCode.ERROR: {\n                                        this.emit(\"accessDenied\");\n                                        //time to kick out the user\n                                        this.logout();\n                                        const errorobj = new InternalError(\n                                            ErrorCode.HTTP_ACCESS_DENIED,\n                                            {\n                                                void: true\n                                            },\n                                            res\n                                        );\n                                        return Promise.reject(errorobj);\n                                    }\n                                }\n                            });\n                        } else {\n                            this.emit(\"accessDenied\");\n                            const errorobj = new InternalError(\n                                ErrorCode.HTTP_ACCESS_DENIED,\n                                {\n                                    void: true\n                                },\n                                res\n                            );\n                            return Promise.reject(errorobj);\n                        }\n                    }\n                    case 403: {\n                        const request = error.config;\n                        if (\n                            (request.url === \"/\" || request.url === \"\") &&\n                            request.method === \"post\"\n                        ) {\n                            return Promise.resolve(error.response);\n                        } else {\n                            this.emit(\"accessDenied\");\n                            const errorobj = new InternalError(\n                                ErrorCode.HTTP_ACCESS_DENIED,\n                                {\n                                    void: true\n                                },\n                                res\n                            );\n                            return Promise.reject(errorobj);\n                        }\n                    }\n                    case 406: {\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_NOT_ACCEPTABLE,\n                            {\n                                void: true\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    case 409: {\n                        const errorMessage = res.data as Components.Schemas.ErrorMessageResponse;\n\n                        //Thanks for reusing a global erorr status cyber. Log operations can return 409\n                        const request = error.config;\n                        if (request.url === \"/Administration/Logs\" && request.method === \"get\") {\n                            return Promise.resolve(error.response);\n                        }\n\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_DATA_INEGRITY,\n                            {\n                                errorMessage\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    case 426: {\n                        const errorMessage = res.data as Components.Schemas.ErrorMessageResponse;\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_API_MISMATCH,\n                            { errorMessage },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    case 500: {\n                        const errorMessage = res.data as Components.Schemas.ErrorMessageResponse;\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_SERVER_ERROR,\n                            {\n                                errorMessage\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    case 501: {\n                        const errorMessage = res.data as Components.Schemas.ErrorMessageResponse;\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_UNIMPLEMENTED,\n                            { errorMessage },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    case 503: {\n                        console.log(\"Server not ready, delaying request\", error.config);\n                        return new Promise(resolve => {\n                            setTimeout(resolve, 5000);\n                        }).then(() => this.api!.client.request(error.config));\n                        /*const errorobj = new InternalError(\n                                ErrorCode.HTTP_SERVER_NOT_READY,\n                                {\n                                    void: true\n                                },\n                                res\n                            );\n                            return Promise.reject(errorobj);*/\n                    }\n                    default: {\n                        const errorobj = new InternalError(\n                            ErrorCode.UNHANDLED_GLOBAL_RESPONSE,\n                            {\n                                axiosResponse: res\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                }\n            }\n        );\n        console.timeEnd(\"APIInit\");\n        this.initialized = true;\n        this.emit(\"initialized\");\n    }\n\n    //Utility function that returns a promise which resolves whenever ServerClient#ApiClient becomes valid\n    public wait4Init(): Promise<void> {\n        return new Promise<void>(resolve => {\n            if (this.initialized) {\n                resolve();\n                return;\n            }\n            this.on(\"initialized\", () => resolve());\n        });\n    }\n\n    //Utility function that returns a promise which resolves with the token whenever theres valid credentials(could be immediatly)\n    public wait4Token() {\n        return new Promise<Components.Schemas.TokenResponse>(resolve => {\n            if (CredentialsProvider.isTokenValid()) {\n                resolve(CredentialsProvider.token);\n                return;\n            }\n            this.on(\"tokenAvailable\", token => {\n                resolve(token);\n            });\n        });\n    }\n\n    public async login(\n        newCreds?: ICredentials\n    ): Promise<InternalStatus<Components.Schemas.TokenResponse, LoginErrors>> {\n        //Shouldn't really happen edge cases\n        await this.wait4Init();\n\n        console.log(\"Attempting login\");\n\n        //Newcreds is optional, if its missing its going to try to reuse the last used credentials,\n        // if newCreds exists, its going to use newCreds\n        let oauthAutoLogin = false;\n        if (newCreds) {\n            CredentialsProvider.credentials = newCreds;\n        } else if (CredentialsProvider.credentials?.type === CredentialsType.OAuth) {\n            // autologin doesn't work with OAuth\n            this.logout();\n            oauthAutoLogin = true;\n        }\n\n        //This is thrown if you try to reuse the last credentials without actually having last used credentials\n        //or you let an oauth login expire\n        if (oauthAutoLogin || !CredentialsProvider.credentials)\n            return new InternalStatus<Components.Schemas.TokenResponse, ErrorCode.LOGIN_NOCREDS>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.LOGIN_NOCREDS, { void: true })\n            });\n\n        //This block is here to prevent duplication of login requests at the same time, when you start logging in,\n        // it sets loggingIn to true and fires an event once its done logging in, successful or not, if you try to login\n        // while another login request is ongoing, it listens to that event and returns the output normally.\n        //\n        // Basically, make two calls, receive two identical return values, make only one request\n        if (this.loggingIn) {\n            return await new Promise(resolve => {\n                const resolver = (\n                    info: InternalStatus<Components.Schemas.TokenResponse, LoginErrors>\n                ) => {\n                    resolve(info);\n                    this.removeListener(\"loadLoginInfo\", resolver);\n                };\n                this.on(\"loadLoginInfo\", resolver);\n            });\n        }\n        this.loggingIn = true;\n\n        let response;\n        try {\n            if (CredentialsProvider.credentials.type == CredentialsType.Password)\n                response = await this.apiClient!.HomeController_CreateToken(\n                    {\n                        OAuthProvider: (undefined as unknown) as string\n                    },\n                    null,\n                    {\n                        auth: {\n                            username: CredentialsProvider.credentials.userName,\n                            password: CredentialsProvider.credentials.password\n                        }\n                    }\n                );\n            else {\n                response = await this.apiClient!.HomeController_CreateToken(\n                    {\n                        OAuthProvider: CredentialsProvider.credentials.provider\n                    },\n                    null,\n                    {\n                        headers: {\n                            Authorization: `OAuth ${CredentialsProvider.credentials.token}`\n                        }\n                    }\n                );\n            }\n        } catch (stat) {\n            const res = new InternalStatus<Components.Schemas.TokenResponse, GenericErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n            this.emit(\"loadLoginInfo\", res);\n            return res;\n        } finally {\n            this.loggingIn = false;\n        }\n        switch (response.status) {\n            case 200: {\n                console.log(\"Login success\");\n                const token = response.data as Components.Schemas.TokenResponse;\n\n                // CredentialsProvider.token is added to all requests in the form of Authorization: Bearer <token>\n                CredentialsProvider.token = token;\n                this.emit(\"tokenAvailable\", token);\n\n                //LoginHooks are a way of running several async tasks at the same time whenever the user is authenticated,\n                // we cannot use events here as events wait on each listener before proceeding which has a noticable performance\n                // cost when it comes to several different requests to TGS,\n                // we cant directly call what we need to run here as it would violate isolation of\n                // ApiClient(the apiclient is independent from the rest of the app to avoid circular dependency\n                // (example: Component requires ServerClient to login and but the ServerClient requires Component to\n                // update it once the server info is loaded))\n                //\n                // TL;DR; Runs shit when you login\n\n                LoginHooks.runHooks(token);\n                const res = new InternalStatus<Components.Schemas.TokenResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: token\n                });\n                //Deduplication\n                this.emit(\"loadLoginInfo\", res);\n\n                return res;\n            }\n            case 401: {\n                this.logout();\n                console.log(\"Failed to login\");\n                const res = new InternalStatus<\n                    Components.Schemas.TokenResponse,\n                    ErrorCode.LOGIN_FAIL\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.LOGIN_FAIL,\n                        {\n                            void: true\n                        },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n            case 403: {\n                this.logout();\n                console.log(\"Account disabled\");\n                const res = new InternalStatus<\n                    Components.Schemas.TokenResponse,\n                    ErrorCode.LOGIN_DISABLED\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.LOGIN_DISABLED,\n                        {\n                            void: true\n                        },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n            case 429: {\n                this.logout();\n                console.log(\"rate limited\");\n                const res = new InternalStatus<\n                    Components.Schemas.TokenResponse,\n                    ErrorCode.LOGIN_RATELIMIT\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.LOGIN_RATELIMIT,\n                        {\n                            errorMessage: response.data as Components.Schemas.ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n            default: {\n                const res = new InternalStatus<\n                    Components.Schemas.TokenResponse,\n                    ErrorCode.UNHANDLED_RESPONSE\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n        }\n    }\n\n    public logout() {\n        //If theres no token it means theres nothing to clear\n        if (!CredentialsProvider.isTokenValid()) {\n            return;\n        }\n        console.log(\"Logging out\");\n        CredentialsProvider.credentials = undefined;\n        CredentialsProvider.token = undefined;\n        //events to clear the app state as much as possible for the next user\n        this.emit(\"purgeCache\");\n        this.emit(\"logout\");\n    }\n\n    public async getServerInfo(\n        _token?: Components.Schemas.TokenResponse,\n        bypassCache = false\n    ): Promise<InternalStatus<Components.Schemas.ServerInformationResponse, ServerInfoErrors>> {\n        await this.wait4Init();\n\n        if (this._serverInfo && !bypassCache) {\n            return this._serverInfo;\n        }\n\n        if (this.loadingServerInfo) {\n            return new Promise(resolve => {\n                if (this._serverInfo) {\n                    //race condition if 2 things listen to an event or something\n                    resolve(this._serverInfo);\n                    return;\n                }\n                const resolver = (\n                    info: InternalStatus<\n                        Components.Schemas.ServerInformationResponse,\n                        GenericErrors\n                    >\n                ) => {\n                    resolve(info);\n                    this.removeListener(\"loadServerInfo\", resolver);\n                };\n                this.on(\"loadServerInfo\", resolver);\n            });\n        }\n\n        this.loadingServerInfo = true;\n\n        let response;\n        try {\n            response = await this.apiClient!.HomeController_Home();\n        } catch (stat) {\n            const res = new InternalStatus<\n                Components.Schemas.ServerInformationResponse,\n                GenericErrors\n            >({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n            this.emit(\"loadServerInfo\", res);\n            this.loadingServerInfo = false;\n            return res;\n        }\n        switch (response.status) {\n            case 200: {\n                const info = response.data as Components.Schemas.ServerInformationResponse;\n                const cache = new InternalStatus<\n                    Components.Schemas.ServerInformationResponse,\n                    ErrorCode.OK\n                >({\n                    code: StatusCode.OK,\n                    payload: info\n                });\n                this.emit(\"loadServerInfo\", cache);\n                this._serverInfo = cache;\n                this.loadingServerInfo = false;\n                return cache;\n            }\n            default: {\n                const res = new InternalStatus<\n                    Components.Schemas.ServerInformationResponse,\n                    ErrorCode.UNHANDLED_RESPONSE\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadServerInfo\", res);\n                this.loadingServerInfo = false;\n                return res;\n            }\n        }\n    }\n})();\n\n//https://stackoverflow.com/questions/40510611/typescript-interface-require-one-of-two-properties-to-exist\n//name describes what it does, makes the passed type only require 1 property, the others being optional\nexport type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\n    {\n        [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;\n    }[Keys];\n","export enum AdministrationRights {\n   None = 0,\n   WriteUsers = 1,\n   RestartHost = 2,\n   ChangeVersion = 4,\n   EditOwnPassword = 8,\n   ReadUsers = 16,\n   DownloadLogs = 32,\n   EditOwnOAuthConnections = 64\n}\n\nexport enum ByondRights {\n   None = 0,\n   ReadActive = 1,\n   ListInstalled = 2,\n   InstallOfficialOrChangeActiveVersion = 4,\n   CancelInstall = 8,\n   InstallCustomVersion = 16\n}\n\nexport enum ChatBotRights {\n   None = 0,\n   WriteEnabled = 1,\n   WriteProvider = 2,\n   WriteChannels = 4,\n   WriteConnectionString = 8,\n   ReadConnectionString = 16,\n   Read = 32,\n   Create = 64,\n   Delete = 128,\n   WriteName = 256,\n   WriteReconnectionInterval = 512,\n   WriteChannelLimit = 1024\n}\n\nexport enum ChatProvider {\n   Irc = 0,\n   Discord = 1\n}\n\nexport enum ConfigurationRights {\n   None = 0,\n   Read = 1,\n   Write = 2,\n   List = 4,\n   Delete = 8\n}\n\nexport enum ConfigurationType {\n   Disallowed = 0,\n   HostWrite = 1,\n   SystemIdentityWrite = 2\n}\n\nexport enum DreamDaemonRights {\n   None = 0,\n   ReadRevision = 1,\n   SetPort = 2,\n   SetAutoStart = 4,\n   SetSecurity = 8,\n   ReadMetadata = 16,\n   SetWebClient = 32,\n   SoftRestart = 64,\n   SoftShutdown = 128,\n   Restart = 256,\n   Shutdown = 512,\n   Start = 1024,\n   SetStartupTimeout = 2048,\n   SetHeartbeatInterval = 4096,\n   CreateDump = 8192,\n   SetTopicTimeout = 16384,\n   SetAdditionalParameters = 32768\n}\n\nexport enum DreamDaemonSecurity {\n   Trusted = 0,\n   Safe = 1,\n   Ultrasafe = 2\n}\n\nexport enum DreamMakerRights {\n   None = 0,\n   Read = 1,\n   Compile = 2,\n   CancelCompile = 4,\n   SetDme = 8,\n   SetApiValidationPort = 16,\n   CompileJobs = 32,\n   SetSecurityLevel = 64,\n   SetApiValidationRequirement = 128\n}\n\nexport enum ErrorCode {\n   InternalServerError = 0,\n   ApiMismatch = 1,\n   ModelValidationFailure = 2,\n   IOError = 3,\n   BadHeaders = 4,\n   TokenWithToken = 5,\n   DatabaseIntegrityConflict = 6,\n   MissingHostWatchdog = 7,\n   CannotChangeServerSuite = 8,\n   RemoteApiError = 9,\n   ServerUpdateInProgress = 10,\n   UserNameChange = 11,\n   UserSidChange = 12,\n   UserMismatchNameSid = 13,\n   UserMismatchPasswordSid = 14,\n   UserPasswordLength = 15,\n   UserColonInName = 16,\n   UserMissingName = 17,\n   InstanceRelocateOnline = 18,\n   InstanceAtExistingPath = 19,\n   InstanceDetachOnline = 20,\n   InstanceAtConflictingPath = 21,\n   InstanceLimitReached = 22,\n   InstanceWhitespaceName = 23,\n   InstanceHeaderRequired = 24,\n   RequiresPosixSystemIdentity = 25,\n   ConfigurationFileUpdated = 26,\n   ConfigurationDirectoryNotEmpty = 27,\n   DEPRECATED_UnusedErrorCode1 = 28,\n   RepoMismatchUserAndAccessToken = 29,\n   RepoCloning = 30,\n   RepoBusy = 31,\n   RepoExists = 32,\n   RepoMissing = 33,\n   RepoMismatchShaAndReference = 34,\n   RepoMismatchShaAndUpdate = 35,\n   DEPRECATED_UnusedErrorCode2 = 36,\n   RepoDuplicateTestMerge = 37,\n   RepoWhitespaceCommitterName = 38,\n   RepoWhitespaceCommitterEmail = 39,\n   ApiPageTooLarge = 40,\n   ApiInvalidPageOrPageSize = 41,\n   ChatBotWrongChannelType = 42,\n   ChatBotWhitespaceConnectionString = 43,\n   ChatBotWhitespaceName = 44,\n   ChatBotProviderMissing = 45,\n   DEPRECATED_UnusedErrorCode3 = 46,\n   ChatBotMax = 47,\n   ChatBotMaxChannels = 48,\n   ByondDirectXInstallFail = 49,\n   ByondDownloadFail = 50,\n   ByondNoVersionsInstalled = 51,\n   DreamMakerNeverValidated = 52,\n   DreamMakerInvalidValidation = 53,\n   CannotRemoveLastAuthenticationOption = 54,\n   DreamMakerNoDme = 55,\n   DreamMakerMissingDme = 56,\n   DreamMakerExitCode = 57,\n   DreamMakerCompileJobInProgress = 58,\n   InstanceMissingDreamDaemonSettings = 59,\n   InstanceMissingDreamMakerSettings = 60,\n   InstanceMissingRepositorySettings = 61,\n   InstanceUpdateTestMergeConflict = 62,\n   RepoCredentialsRequired = 63,\n   RepoCannotAuthenticate = 64,\n   RepoReferenceRequired = 65,\n   WatchdogRunning = 66,\n   WatchdogCompileJobCorrupted = 67,\n   WatchdogStartupFailed = 68,\n   WatchdogStartupTimeout = 69,\n   RepoUnsupportedTestMergeRemote = 70,\n   RepoSwappedShaOrReference = 71,\n   RepoMergeConflict = 72,\n   RepoReferenceNotTracking = 73,\n   RepoTestMergeConflict = 74,\n   InstanceNotAtWhitelistedPath = 75,\n   DreamDaemonDoubleSoft = 76,\n   DeploymentPagerRunning = 77,\n   DreamDaemonPortInUse = 78,\n   PostDeployFailure = 79,\n   WatchdogNotRunning = 80,\n   ResourceNotPresent = 81,\n   ResourceNeverPresent = 82,\n   GitHubApiRateLimit = 83,\n   JobStopped = 84,\n   MissingGCore = 85,\n   GCoreFailure = 86,\n   RepoTestMergeInvalidRemote = 87,\n   ByondNonExistentCustomVersion = 88,\n   DreamDaemonOffline = 89,\n   InstanceOffline = 90,\n   ChatCannotConnectProvider = 91,\n   ByondDreamDaemonFirewallFail = 92,\n   NoPortsAvailable = 93,\n   PortNotAvailable = 94,\n   AdminUserCannotOAuth = 95,\n   OAuthProviderDisabled = 96,\n   FileUploadExpired = 97,\n   UserGroupAndPermissionSet = 98,\n   UserGroupNotEmpty = 99,\n   UserLimitReached = 100,\n   UserGroupLimitReached = 101\n}\n\nexport enum InstanceManagerRights {\n   None = 0,\n   Read = 1,\n   Create = 2,\n   Rename = 4,\n   Relocate = 8,\n   SetOnline = 16,\n   Delete = 32,\n   List = 64,\n   SetConfiguration = 128,\n   SetAutoUpdate = 256,\n   SetChatBotLimit = 512,\n   GrantPermissions = 1024\n}\n\nexport enum InstancePermissionSetRights {\n   None = 0,\n   Read = 1,\n   Write = 2,\n   Create = 4\n}\n\nexport enum OAuthProvider {\n   GitHub = \"GitHub\",\n   Discord = \"Discord\",\n   TGForums = \"TGForums\",\n   Keycloak = \"Keycloak\"\n}\n\nexport enum RemoteGitProvider {\n   Unknown = 0,\n   GitHub = 1,\n   GitLab = 2\n}\n\nexport enum RepositoryRights {\n   None = 0,\n   CancelPendingChanges = 1,\n   SetOrigin = 2,\n   SetSha = 4,\n   MergePullRequest = 8,\n   UpdateBranch = 16,\n   ChangeCommitter = 32,\n   ChangeTestMergeCommits = 64,\n   ChangeCredentials = 128,\n   SetReference = 256,\n   Read = 512,\n   ChangeAutoUpdateSettings = 1024,\n   Delete = 2048,\n   CancelClone = 4096\n}\n\nexport enum RightsType {\n   Administration = 0,\n   InstanceManager = 1,\n   Repository = 2,\n   Byond = 3,\n   DreamMaker = 4,\n   DreamDaemon = 5,\n   ChatBots = 6,\n   Configuration = 7,\n   InstancePermissionSet = 8\n}\n\nexport enum WatchdogStatus {\n   Offline = 0,\n   Restoring = 1,\n   Online = 2,\n   DelayedRestart = 3\n}\n\n","import { Components } from \"../generatedcode/_generated\";\nimport { ICredentials } from \"../models/ICredentials\";\n\n//Data structure meant to help against circular dependencies within the ApiClient\n//Its rather dumb and only holds username, password and the token.\n//Also contains a function to determine if theres a token here\nexport default new (class CredentialsProvider {\n    //token\n    public token?: Components.Schemas.TokenResponse;\n\n    //credentials\n    public credentials?: ICredentials;\n\n    public isTokenValid() {\n        return (\n            this.credentials &&\n            this.token &&\n            this.token\n                .bearer /* &&\n            (!this.token.expiresAt || new Date(this.token.expiresAt) > new Date(Date.now()))*/\n        );\n    }\n})();\n","import configOptions, { ConfigOption, ConfigValue } from \"./config\";\n\nexport default new (class ConfigController {\n    public loadconfig() {\n        for (const val of Object.values(configOptions)) {\n            this.getconfig(val);\n        }\n        console.log(\"Configuration loaded\", configOptions);\n    }\n\n    public saveconfig(newconfig: { [key: string]: ConfigOption }) {\n        for (const [key, val] of Object.entries(newconfig)) {\n            this.setconfig(key, val);\n        }\n        console.log(\"Configuration saved\", configOptions);\n    }\n\n    private setconfig(key: string, option: ConfigOption) {\n        if (option?.value === undefined) return this.deleteconfig(key);\n\n        //safeties\n        switch (option.type) {\n            case \"num\":\n                //this parses strings and numbers alike to numbers and refuses non numbers\n                //@ts-expect-error //parseInt can take numbers\n                option.value = parseInt(option.value);\n                if (Number.isNaN(option.value)) return;\n                break;\n        }\n\n        if (option.callback) {\n            // @ts-expect-error Can't be assed to figure this one out\n            option.callback(configOptions[key].value, option.value);\n        }\n        configOptions[key].value = option.value;\n        //configOptions[key].persist = option.persist;\n\n        //if (!option.persist) return this.deleteconfig(key); //idiot proofing, alexkar proofing\n\n        try {\n            localStorage.setItem(option.id, JSON.stringify(option.value));\n            //option.persist = true;\n        } catch (e) {\n            (() => {})(); //noop\n        }\n    }\n\n    private getconfig(option: ConfigOption): void {\n        try {\n            const data = localStorage.getItem(option.id);\n            if (data !== undefined && data !== null) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const json = JSON.parse(data);\n                if (json !== null && json !== undefined) {\n                    option.value = json as ConfigValue;\n                }\n                //option.persist = true;\n            }\n        } catch (e) {\n            (() => {})(); //noop\n        }\n    }\n\n    private deleteconfig(key: string): void {\n        try {\n            const option = configOptions[key];\n            localStorage.removeItem(option.id);\n            //option.persist = false;\n        } catch (e) {\n            (() => {})(); //noop\n        }\n    }\n})();\n","import { DEFAULT_APIPATH } from \"../../definitions/constants\";\n\nexport type ConfigValue = number | string | boolean;\n\nexport type ConfigOption = BaseConfigOption &\n    (NumConfigOption | StrConfigOption | PwdConfigOption | BoolConfigOption | EnumConfigOption);\n\nexport interface BaseConfigOption {\n    id: string;\n}\n\nexport interface NumConfigOption extends BaseConfigOption {\n    type: \"num\";\n    value: number;\n    callback?: (oldValue: number, newValue: number) => void;\n}\nexport interface StrConfigOption extends BaseConfigOption {\n    type: \"str\";\n    value: string;\n    callback?: (oldValue: string, newValue: string) => void;\n}\nexport interface PwdConfigOption extends BaseConfigOption {\n    type: \"pwd\";\n    value: string;\n    callback?: (oldValue: string, newValue: string) => void;\n}\nexport interface BoolConfigOption extends BaseConfigOption {\n    type: \"bool\";\n    value: boolean;\n    callback?: (oldValue: boolean, newValue: boolean) => void;\n}\nexport interface EnumConfigOption extends BaseConfigOption {\n    type: \"enum\";\n    possibleValues: Record<string, string>;\n    value: string;\n    callback?: (oldValue: string, newValue: string) => void;\n}\n\nexport type ConfigMap = {\n    [key: string]: ConfigOption;\n};\n\nexport enum jobsWidgetOptions {\n    ALWAYS = \"always\",\n    AUTO = \"auto\",\n    NEVER = \"never\"\n}\n\nconst configOptions: ConfigMap = {\n    githubtoken: {\n        id: \"config.githubtoken\",\n        type: \"pwd\",\n        value: \"\"\n    },\n    apipath: {\n        id: \"config.apipath\",\n        type: \"str\",\n        value: DEFAULT_APIPATH\n    },\n    jobpollinactive: {\n        id: \"config.jobpollinactive\",\n        type: \"num\",\n        value: 15\n    },\n    jobpollactive: {\n        id: \"config.jobpollactive\",\n        type: \"num\",\n        value: 5\n    },\n    jobswidgetdisplay: {\n        id: \"config.jobswidgetdisplay\",\n        type: \"enum\",\n        possibleValues: jobsWidgetOptions,\n        value: jobsWidgetOptions.AUTO\n    }\n};\n\nexport default configOptions;\n","import InternalError, { ErrorCode } from \"./InternalError\";\n\nexport enum StatusCode {\n    OK,\n    ERROR\n}\n\nexport interface InternalStatusErr<Codes extends ErrorCode> {\n    code: StatusCode.ERROR;\n    error: InternalError<Codes>;\n}\n\nexport interface InternalStatusOK<T> {\n    code: StatusCode.OK;\n    payload: T;\n}\n\ntype InternalStatus<T, Codes extends ErrorCode> = InternalStatusOK<T> | InternalStatusErr<Codes>;\n\nconst InternalStatus = (function InternalStatus<T, Codes extends ErrorCode>(\n    this: InternalStatus<T, Codes>,\n    args: InternalStatus<T, Codes>\n): Readonly<InternalStatus<T, Codes>> {\n    return Object.freeze(Object.assign({}, args));\n} as unknown) as {\n    new <T, Codes extends ErrorCode>(args: InternalStatus<T, Codes>): Readonly<\n        InternalStatus<T, Codes>\n    >;\n};\n\nexport default InternalStatus;\n","import { TypedEmitter } from \"tiny-typed-emitter\";\n\nimport { Components } from \"../generatedcode/_generated\";\n\ninterface IEvents {\n    //tasks once the user is fully logged in\n    loginSuccess: (token: Components.Schemas.TokenResponse) => void;\n}\n\nclass LoginHooks extends TypedEmitter<IEvents> {\n    private promiseHooks: Set<\n        (token: Components.Schemas.TokenResponse) => Promise<unknown>\n    > = new Set();\n\n    public runHooks(token: Components.Schemas.TokenResponse) {\n        console.log(\"Running login hooks\");\n        let i = 0;\n        const work: Array<Promise<void>> = [];\n        for (const hook of this.promiseHooks) {\n            const id = i;\n            console.log(`Running hook ${hook.name}(${id})`);\n            work.push(\n                new Promise<void>((resolve, reject) => {\n                    hook(token)\n                        .then(() => {\n                            console.log(`Done hook ${hook.name}(${id})`);\n                            resolve();\n                        })\n                        .catch(err => {\n                            console.error(`Error running hook ${hook.name}(${id}): `, err);\n                            reject(err);\n                        });\n                })\n            );\n            i++;\n        }\n        Promise.all(work)\n            .then(() => {\n                console.log(\"Running post login event\");\n                this.emit(\"loginSuccess\", token);\n            })\n            .catch(() => console.error(\"An error occured while running login hooks\"));\n    }\n\n    public addHook(hook: (token: Components.Schemas.TokenResponse) => Promise<unknown>): void {\n        this.promiseHooks.add(hook);\n    }\n\n    public removeHook(hook: (token: Components.Schemas.TokenResponse) => Promise<unknown>): void {\n        this.promiseHooks.delete(hook);\n    }\n}\n\nexport default new LoginHooks();\n","import { Components } from \"./generatedcode/_generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\nexport type listJobsErrors = GenericErrors;\nexport type getJobErrors = GenericErrors | ErrorCode.JOB_JOB_NOT_FOUND;\nexport type deleteJobErrors =\n    | GenericErrors\n    | ErrorCode.JOB_JOB_NOT_FOUND\n    | ErrorCode.JOB_JOB_COMPLETE;\n\nexport default new (class JobsClient {\n    public async listActiveJobs(\n        instanceid: number\n    ): Promise<InternalStatus<Components.Schemas.JobResponse[], listJobsErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.JobController_Read({\n                Instance: instanceid,\n                page: 1,\n                pageSize: 100\n            });\n        } catch (stat) {\n            return new InternalStatus<Components.Schemas.JobResponse[], listJobsErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus<Components.Schemas.JobResponse[], listJobsErrors>({\n                    code: StatusCode.OK,\n                    payload: (response.data as Components.Schemas.PaginatedJobResponse)!.content\n                });\n            }\n            default: {\n                return new InternalStatus<Components.Schemas.JobResponse[], listJobsErrors>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getJob(\n        instanceid: number,\n        jobid: number\n    ): Promise<InternalStatus<Components.Schemas.JobResponse, getJobErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.JobController_GetId({\n                Instance: instanceid,\n                id: jobid\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as Components.Schemas.JobResponse\n                });\n            }\n            case 404: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.JOB_JOB_NOT_FOUND, {\n                        errorMessage: response.data as Components.Schemas.ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async deleteJob(\n        instanceid: number,\n        jobid: number\n    ): Promise<InternalStatus<Components.Schemas.JobResponse, deleteJobErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.JobController_Delete({\n                Instance: instanceid,\n                id: jobid\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as Components.Schemas.JobResponse\n                });\n            }\n            case 404: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.JOB_JOB_NOT_FOUND, {\n                        errorMessage: response.data as Components.Schemas.ErrorMessageResponse\n                    })\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.JOB_JOB_COMPLETE, {\n                        void: true\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n","import { TypedEmitter } from \"tiny-typed-emitter\";\n\nimport { resolvePermissionSet } from \"../../utils/misc\";\nimport {\n    AdministrationRights,\n    ByondRights,\n    ChatBotRights,\n    ConfigurationRights,\n    DreamDaemonRights,\n    DreamMakerRights,\n    ErrorCode as TGSErrorCode,\n    InstanceManagerRights,\n    InstancePermissionSetRights,\n    RepositoryRights,\n    RightsType\n} from \"../generatedcode/_enums\";\nimport { Components } from \"../generatedcode/_generated\";\nimport InstancePermissionSetClient from \"../InstancePermissionSetClient\";\nimport JobsClient, { getJobErrors, listJobsErrors } from \"../JobsClient\";\nimport InternalError, { ErrorCode } from \"../models/InternalComms/InternalError\";\nimport { StatusCode } from \"../models/InternalComms/InternalStatus\";\nimport ServerClient from \"../ServerClient\";\nimport UserClient from \"../UserClient\";\nimport configOptions from \"./config\";\n\ninterface IEvents {\n    jobsLoaded: () => unknown;\n}\n\nexport type CanCancelJob = Components.Schemas.JobResponse & {\n    canCancel?: boolean;\n};\n\nexport default new (class JobsController extends TypedEmitter<IEvents> {\n    private _instance: number | undefined;\n    public set instance(id: number | undefined) {\n        this._instance = id;\n        this.reset();\n    }\n\n    //This is a special property that gets set by approutes to add a handler for when this needs to change the instance\n    // This is here as a hack so that JobsController doesnt have to reference files outside the api client\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    public setInstance: (instance: number | undefined) => void = () => {};\n\n    private fastmodecount = 0;\n    public set fastmode(cycles: number) {\n        console.log(`JobsController going in fastmode for ${cycles} cycles`);\n        this.fastmodecount = cycles;\n        this.restartLoop();\n    }\n\n    private currentLoop: Date = new Date(0);\n\n    public errors: InternalError<getJobErrors | listJobsErrors>[] = [];\n    public jobs: Map<number, Components.Schemas.JobResponse> = new Map<\n        number,\n        Components.Schemas.JobResponse\n    >();\n\n    private reset() {\n        this.jobs = new Map<number, Components.Schemas.JobResponse>();\n        this.restartLoop();\n    }\n\n    public constructor() {\n        super();\n\n        this.loop = this.loop.bind(this);\n        this.reset = this.reset.bind(this);\n\n        //technically not a \"cache\" but we might as well reload it\n        ServerClient.on(\"purgeCache\", this.reset);\n    }\n\n    public restartLoop() {\n        //we use an actual date object here because it could help prevent really weird timing\n        // issues as two different date objects cannot be equal\n        // despite the date being\n        const initDate = new Date(Date.now());\n        this.currentLoop = initDate;\n        this.loop(initDate);\n    }\n\n    private loop(loopid: Date) {\n        //if we dont got an instance to check, dont check\n        // normally we should have an instance id, but this is in case we dont\n        if (this._instance === undefined) {\n            return;\n        }\n\n        //so loops get initialiazed with the current time, it keeps track of which loop to run with\n        // that initialization date in currentLoop if the currentLoop isnt equal to the one provided\n        // to the loop, it means that the loop was\n        // replaced so we dont try to call for another one\n        if (loopid !== this.currentLoop) {\n            return;\n        }\n\n        //time to clear out errors\n        this.errors = [];\n\n        //now since this is async, it still possible that a single fire gets done after the new loop started, theres no really much that can be done about it\n        JobsClient.listActiveJobs(this._instance)\n            .then(async value => {\n                //this check is here because the request itself is async and could return after\n                // the loop is terminated, we dont want to contaminate the jobs of an instance\n                // with the jobs of another even if it is for a single fire and would eventually\n                // get fixed on its own after a few seconds\n                if (loopid !== this.currentLoop) return;\n\n                if (value.code === StatusCode.OK) {\n                    for (const job of value.payload) {\n                        this.jobs.set(job.id, job);\n                    }\n\n                    //we check all jobs we have locally against the active jobs we got in the reply so\n                    // we can query jobs which we didnt get informed about manually\n                    const localids = Array.from(this.jobs, ([, job]) => job.id);\n                    const remoteids = value.payload.map(job => job.id);\n\n                    const manualids = localids.filter(x => !remoteids.includes(x));\n\n                    const work: Promise<void>[] = [];\n                    for (const id of manualids) {\n                        work.push(\n                            JobsClient.getJob(this._instance!, id).then(status => {\n                                if (loopid !== this.currentLoop) return;\n\n                                if (status.code === StatusCode.OK) {\n                                    this.jobs.set(id, status.payload);\n                                } else {\n                                    this.errors.push(status.error);\n                                }\n                            })\n                        );\n                    }\n                    //await all jobs to exist\n                    await Promise.all(work);\n\n                    if (loopid !== this.currentLoop) return;\n\n                    work.length = 0;\n                    for (const _job of this.jobs.values()) {\n                        const job = _job as CanCancelJob;\n                        if (job.progress === undefined) {\n                            work.push(\n                                JobsClient.getJob(this._instance!, job.id).then(progressedjob => {\n                                    if (loopid !== this.currentLoop) return;\n                                    if (progressedjob.code === StatusCode.OK) {\n                                        job.progress = progressedjob.payload.progress;\n                                    } else {\n                                        this.errors.push(progressedjob.error);\n                                    }\n                                })\n                            );\n                        }\n\n                        work.push(\n                            this.canCancel(job, this.errors).then(canCancel => {\n                                if (loopid !== this.currentLoop) return;\n                                job.canCancel = canCancel;\n                            })\n                        );\n                    }\n\n                    //populate fields on jobs\n                    await Promise.all(work);\n\n                    if (loopid !== this.currentLoop) return;\n\n                    if (this.fastmodecount && loopid === this.currentLoop) {\n                        window.setTimeout(() => this.loop(loopid), 800);\n                        this.fastmodecount--;\n                        console.log(\n                            `JobsController will remain in fastmode for ${this.fastmodecount} cycles`\n                        );\n                    } else {\n                        window.setTimeout(\n                            () => this.loop(loopid),\n                            (value.payload.length\n                                ? (configOptions.jobpollactive.value as number)\n                                : (configOptions.jobpollinactive.value as number)) * 1000\n                        );\n                    }\n                } else {\n                    if (\n                        value.error.code === ErrorCode.HTTP_DATA_INEGRITY &&\n                        value.error.originalErrorMessage?.errorCode === TGSErrorCode.InstanceOffline\n                    ) {\n                        console.log(\"[JobsController] Clearing instance as it is now offline\");\n                        this.setInstance(undefined);\n                    }\n                    this.errors.push(value.error);\n                    window.setTimeout(() => this.loop(loopid), 10000);\n                }\n\n                this.emit(\"jobsLoaded\");\n            })\n            .catch(reason => {\n                console.error(reason);\n            });\n    }\n\n    private async canCancel(\n        job: Readonly<CanCancelJob>,\n        errors: InternalError<ErrorCode>[]\n    ): Promise<boolean> {\n        //shouldnt really occur in normal conditions but this is a safety anyways\n        if (this._instance === undefined) return false;\n\n        //we dont need to reevalutate stuff that we already know\n        if (job.canCancel !== undefined) return job.canCancel;\n\n        if (job.cancelRightsType === undefined) {\n            return true;\n        }\n\n        switch (job.cancelRightsType as RightsType) {\n            case RightsType.Administration: {\n                const userInfo = await UserClient.getCurrentUser();\n                if (userInfo.code === StatusCode.OK) {\n                    const required = job.cancelRight as AdministrationRights;\n                    return !!(\n                        resolvePermissionSet(userInfo.payload).administrationRights & required\n                    );\n                } else {\n                    errors.push(userInfo.error);\n                    return false;\n                }\n            }\n            case RightsType.InstanceManager: {\n                const userInfo = await UserClient.getCurrentUser();\n                if (userInfo.code === StatusCode.OK) {\n                    const required = job.cancelRight as InstanceManagerRights;\n                    return !!(\n                        resolvePermissionSet(userInfo.payload).instanceManagerRights & required\n                    );\n                } else {\n                    errors.push(userInfo.error);\n                    return false;\n                }\n            }\n            case RightsType.Byond: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    this._instance\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as ByondRights;\n                    return !!(InstancePermissionSet.payload.byondRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.ChatBots: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    this._instance\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as ChatBotRights;\n                    return !!(InstancePermissionSet.payload.chatBotRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.Configuration: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    this._instance\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as ConfigurationRights;\n                    return !!(InstancePermissionSet.payload.configurationRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.DreamDaemon: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    this._instance\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as DreamDaemonRights;\n                    return !!(InstancePermissionSet.payload.dreamDaemonRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.DreamMaker: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    this._instance\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as DreamMakerRights;\n                    return !!(InstancePermissionSet.payload.dreamMakerRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.InstancePermissionSet: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    this._instance\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as InstancePermissionSetRights;\n                    return !!(InstancePermissionSet.payload.instancePermissionSetRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.Repository: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    this._instance\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as RepositoryRights;\n                    return !!(InstancePermissionSet.payload.repositoryRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n        }\n    }\n\n    public async cancelOrClear(\n        jobid: number,\n        onError: (error: InternalError<ErrorCode>) => void\n    ): Promise<boolean> {\n        const job = this.jobs.get(jobid);\n\n        //no we cant cancel jobs we arent aware of yet\n        if (!job) return false;\n\n        //just clear out the job\n        if (job.stoppedAt) {\n            this.jobs.delete(jobid);\n            return true;\n        } else {\n            if (this._instance === undefined) {\n                onError(\n                    new InternalError(ErrorCode.APP_FAIL, {\n                        jsError: new Error(\"No instance selected during deletion of a job\")\n                    })\n                );\n                return false;\n            } else {\n                const deleteInfo = await JobsClient.deleteJob(this._instance, jobid);\n                if (deleteInfo.code === StatusCode.OK) {\n                    return true;\n                } else {\n                    onError(deleteInfo.error);\n                    return false;\n                }\n            }\n        }\n    }\n})();\n","import { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport { AdministrationRights, InstanceManagerRights } from \"./generatedcode/_enums\";\nimport { Components } from \"./generatedcode/_generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport LoginHooks from \"./util/LoginHooks\";\n\ninterface IEvents {\n    loadUserInfo: (user: InternalStatus<Components.Schemas.UserResponse, GenericErrors>) => void;\n}\n\nexport type EditUserErrors = GenericErrors | ErrorCode.USER_NOT_FOUND;\nexport type GetUserErrors = GenericErrors | ErrorCode.USER_NOT_FOUND;\nexport type CreateUserErrors = GenericErrors | ErrorCode.USER_NO_SYS_IDENT;\n\nexport default new (class UserClient extends TypedEmitter<IEvents> {\n    private _cachedUser?: InternalStatus<Components.Schemas.UserResponse, ErrorCode.OK>;\n    public get cachedUser() {\n        return this._cachedUser;\n    }\n    private loadingUserInfo = false;\n    //If set to true, all created users will default to having all permissions granted, used by the setup\n    public createAllUsersWithAA = false;\n\n    public constructor() {\n        super();\n        this.getCurrentUser = this.getCurrentUser.bind(this);\n\n        LoginHooks.addHook(() => this.getCurrentUser());\n        ServerClient.on(\"purgeCache\", () => {\n            this._cachedUser = undefined;\n        });\n    }\n\n    public async editUser(\n        newUser: Components.Schemas.UserUpdateRequest\n    ): Promise<InternalStatus<Components.Schemas.UserResponse, EditUserErrors>> {\n        await ServerClient.wait4Init();\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserController_Update(null, newUser);\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<EditUserErrors>\n            });\n        }\n        // noinspection DuplicatedCode\n        switch (response.status) {\n            case 200: {\n                const current = await this.getCurrentUser();\n                if (current.code == StatusCode.OK) {\n                    if (current.payload.id == newUser.id) {\n                        //if we are editing ourselves, clear cached data to reload permissions on the app\n                        ServerClient.emit(\"purgeCache\");\n                    }\n                } else {\n                    return new InternalStatus({\n                        code: StatusCode.ERROR,\n                        error: current.error\n                    });\n                }\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as Components.Schemas.UserResponse\n                });\n            }\n            case 404: {\n                const errorMessage = response.data as Components.Schemas.ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.USER_NOT_FOUND, { errorMessage })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getCurrentUser(\n        bypassCache?: boolean\n    ): Promise<InternalStatus<Components.Schemas.UserResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n        if (this._cachedUser && !bypassCache) {\n            return this._cachedUser;\n        }\n\n        if (this.loadingUserInfo) {\n            return await new Promise(resolve => {\n                const resolver = (\n                    user: InternalStatus<Components.Schemas.UserResponse, GenericErrors>\n                ) => {\n                    resolve(user);\n                    this.removeListener(\"loadUserInfo\", resolver);\n                };\n                this.on(\"loadUserInfo\", resolver);\n            });\n        }\n\n        this.loadingUserInfo = true;\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserController_Read();\n        } catch (stat) {\n            const res = new InternalStatus<Components.Schemas.UserResponse, GenericErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n            this.emit(\"loadUserInfo\", res);\n            this.loadingUserInfo = false;\n            return res;\n        }\n\n        switch (response.status) {\n            case 200: {\n                const thing = new InternalStatus<Components.Schemas.UserResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: response.data as Components.Schemas.UserResponse\n                });\n\n                this._cachedUser = thing;\n                this.emit(\"loadUserInfo\", thing);\n                this.loadingUserInfo = false;\n                return thing;\n            }\n            default: {\n                const res = new InternalStatus<\n                    Components.Schemas.UserResponse,\n                    ErrorCode.UNHANDLED_RESPONSE\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadUserInfo\", res);\n                this.loadingUserInfo = false;\n                return res;\n            }\n        }\n    }\n\n    public async listUsers(): Promise<\n        InternalStatus<Components.Schemas.UserResponse[], GenericErrors>\n    > {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserController_List({\n                page: 1,\n                pageSize: 100\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                const payload = (response.data as Components.Schemas.PaginatedUserResponse)!.content.sort(\n                    (a, b) => a.id - b.id\n                );\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getUser(\n        id: number\n    ): Promise<InternalStatus<Components.Schemas.UserResponse, GetUserErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserController_GetId({ id: id });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        // noinspection DuplicatedCode\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as Components.Schemas.UserResponse\n                });\n            }\n            case 404: {\n                const errorMessage = response.data as Components.Schemas.ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.USER_NOT_FOUND, { errorMessage })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async createUser(\n        newuser:\n            | {\n                  name: string;\n                  password: string;\n                  enabled?: boolean;\n                  instanceManagerRights?: InstanceManagerRights;\n                  administrationRights?: AdministrationRights;\n              }\n            | {\n                  systemIdentifier: string;\n                  enabled?: boolean;\n                  instanceManagerRights?: InstanceManagerRights;\n                  administrationRights?: AdministrationRights;\n              }\n    ): Promise<InternalStatus<Components.Schemas.UserResponse, CreateUserErrors>> {\n        await ServerClient.wait4Init();\n\n        if (newuser.enabled === undefined) newuser.enabled = true;\n        if (this.createAllUsersWithAA) {\n            newuser.instanceManagerRights = 0;\n            newuser.administrationRights = 0;\n\n            for (const perm of Object.values(InstanceManagerRights)) {\n                if (typeof perm !== \"number\") continue;\n                newuser.instanceManagerRights += perm;\n            }\n\n            for (const perm of Object.values(AdministrationRights)) {\n                if (typeof perm !== \"number\") continue;\n                newuser.administrationRights += perm;\n            }\n        }\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserController_Create(\n                null,\n                newuser as Components.Schemas.UserCreateRequest\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 201: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as Components.Schemas.UserResponse\n                });\n            }\n            case 410: {\n                const errorMessage = response.data as Components.Schemas.ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.USER_NO_SYS_IDENT, { errorMessage })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n","import { OAuthProvider } from \"../generatedcode/_enums\";\n\nexport enum CredentialsType {\n    Password,\n    OAuth\n}\n\nexport interface IPasswordCredentials {\n    type: CredentialsType.Password;\n    userName: string;\n    password: string;\n}\n\nexport interface IOAuthCredentials {\n    type: CredentialsType.OAuth;\n    provider: OAuthProvider;\n    token: string;\n}\n\nexport type ICredentials = IPasswordCredentials | IOAuthCredentials;\n","import { AxiosResponse } from \"axios\";\n\nimport { replaceAll } from \"../../../utils/misc\";\nimport { ErrorCode as TGSErrorCode } from \"../../generatedcode/_enums\";\nimport { Components } from \"../../generatedcode/_generated\";\nimport configOptions from \"../../util/config\";\nimport CredentialsProvider from \"../../util/CredentialsProvider\";\n\nexport type GenericErrors =\n    | ErrorCode.HTTP_BAD_REQUEST\n    | ErrorCode.HTTP_DATA_INEGRITY\n    | ErrorCode.HTTP_API_MISMATCH\n    | ErrorCode.HTTP_SERVER_ERROR\n    | ErrorCode.HTTP_UNIMPLEMENTED\n    //    | ErrorCode.HTTP_SERVER_NOT_READY\n    | ErrorCode.AXIOS\n    | ErrorCode.UNHANDLED_RESPONSE\n    | ErrorCode.UNHANDLED_GLOBAL_RESPONSE\n    | ErrorCode.HTTP_ACCESS_DENIED\n    | ErrorCode.HTTP_NOT_ACCEPTABLE\n    | ErrorCode.OK\n    | ErrorCode.NO_APIPATH\n    | ErrorCode.APP_FAIL;\n\nexport enum ErrorCode {\n    OK = 'Isnt displayed but is used as an \"error\" when everything is ok', //void\n    HTTP_BAD_REQUEST = \"error.http.bad_request\", //errmessage\n    HTTP_DATA_INEGRITY = \"error.http.data_integrity\", //errmessage\n    HTTP_API_MISMATCH = \"error.http.api_mismatch\", //void\n    HTTP_SERVER_ERROR = \"error.http.server_error\", //errmessage\n    HTTP_UNIMPLEMENTED = \"error.http.unimplemented\", //errmessage\n    //auto retry    HTTP_SERVER_NOT_READY = 'error.http.server_not_ready', //void\n    HTTP_ACCESS_DENIED = \"error.http.access_denied\", //void\n    HTTP_NOT_ACCEPTABLE = \"error.http.not_acceptable\", //void\n    UNHANDLED_RESPONSE = \"error.unhandled_response\", //axiosresponse\n    UNHANDLED_GLOBAL_RESPONSE = \"error.unhandled_global_response\", //axiosresponse\n    AXIOS = \"error.axios\", //jserror\n\n    //Generic errors\n    GITHUB_FAIL = \"error.github\", //jserror\n    APP_FAIL = \"error.app\", //jserror\n    NO_APIPATH = \"error.no_apipath\", //void\n\n    //Login errors\n    LOGIN_FAIL = \"error.login.bad_user_pass\", //void\n    LOGIN_NOCREDS = \"error.login.no_creds\", //void\n    LOGIN_DISABLED = \"error.login.user_disabled\", //void\n    LOGIN_BAD_OAUTH = \"error.login.bad_oauth\", //jserror\n    LOGIN_RATELIMIT = \"error.login.rate_limit\", //errmessage\n\n    //User errors\n    USER_NO_SYS_IDENT = \"error.user.no_sys_ident\", //errmessage\n    USER_NOT_FOUND = \"error.user.not_found\", //errmessage\n\n    //Administration errors\n    ADMIN_GITHUB_RATE = \"error.admin.rate\", //errmessage\n    ADMIN_GITHUB_ERROR = \"error.admin.error\", //errmessage\n    ADMIN_WATCHDOG_UNAVAIL = \"error.admin.watchdog.avail\", //errmessage\n    ADMIN_VERSION_NOT_FOUND = \"error.admin.update.notfound\", //errmessage\n    ADMIN_LOGS_IO_ERROR = \"error.admin.logs.io\", //errmessage\n\n    //Job errors\n    JOB_JOB_NOT_FOUND = \"error.job.not_found\", //errmessage\n    JOB_JOB_COMPLETE = \"error.job.complete\", //void\n\n    //Transfer errors\n    TRANSFER_NOT_AVAILABLE = \"error.transfer.not_available\", //errmessage\n\n    GROUP_NOT_FOUND = \"error.group.not_found\", //errmessage\n    GROUP_NOT_EMPTY = \"error.group.not_empty\", //errmessage\n\n    //Instance errors\n    INSTANCE_NO_DB_ENTITY = \"error.instance.no_db_entity\" //errmessage\n}\n\ntype errorMessage = {\n    errorMessage: Components.Schemas.ErrorMessageResponse;\n};\ntype axiosResponse = {\n    axiosResponse: AxiosResponse;\n};\ntype jsError = {\n    jsError: Error;\n};\ntype voidError = {\n    void: true;\n};\n\nexport enum DescType {\n    LOCALE,\n    TEXT\n}\ninterface Desc {\n    type: DescType;\n    desc: string;\n}\n\ntype allAddons = errorMessage | axiosResponse | jsError | voidError;\n\nexport default class InternalError<T extends ErrorCode> {\n    public readonly code: T;\n    public readonly desc?: Desc;\n    public readonly extendedInfo: string;\n    public readonly originalErrorMessage?: Components.Schemas.ErrorMessageResponse;\n\n    public constructor(code: T, addon: allAddons, origin?: AxiosResponse) {\n        this.code = code;\n        if (\"errorMessage\" in addon) {\n            const err = addon.errorMessage;\n            this.originalErrorMessage = err;\n            this.desc = {\n                type: DescType.TEXT,\n                desc:\n                    TGSErrorCode[err.errorCode] +\n                    \": \" +\n                    err.message +\n                    (err.additionalData ? \": \" + err.additionalData : \"\")\n            };\n            if (!err.message) {\n                this.desc = {\n                    type: DescType.TEXT,\n                    desc: TGSErrorCode[err.errorCode]\n                };\n            }\n        }\n        if (\"jsError\" in addon) {\n            const err = addon.jsError;\n            this.desc = {\n                type: DescType.TEXT,\n                desc: `${err.name}: ${err.message}`\n            };\n        }\n        const stack = new Error().stack;\n\n        let debuginfo = JSON.stringify({ addon, origin, config: configOptions, stack });\n        debuginfo = debuginfo.replace(\n            /Basic (?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?/g,\n            \"Basic **************\"\n        );\n        debuginfo = debuginfo.replace(\n            /{\"username\":\".+?\",\"password\":\".+?\"}/g,\n            '{\"username\":\"*******\",\"password\":\"*******\"}'\n        );\n        if (CredentialsProvider.isTokenValid()) {\n            debuginfo = replaceAll(\n                debuginfo,\n                CredentialsProvider.token?.bearer as string,\n                \"**************\"\n            );\n        }\n        if (configOptions.githubtoken.value) {\n            debuginfo = replaceAll(\n                debuginfo,\n                configOptions.githubtoken.value as string,\n                \"**************\"\n            );\n        }\n        this.extendedInfo = debuginfo;\n\n        console.error(\n            `Error occured within the application: ${this.code} (${\n                this.desc?.desc || \"No description\"\n            })`,\n            this\n        );\n\n        //@ts-expect-error yeah well, i aint extending the window interface\n        if (window.breakonerror) {\n            // eslint-disable-next-line no-debugger\n            debugger;\n        }\n    }\n}\n","import { TypedEmitter } from \"tiny-typed-emitter\";\n\nimport { Components } from \"./generatedcode/_generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\ninterface IEvents {\n    loadInstancePermissionSet: (\n        user: InternalStatus<Components.Schemas.InstancePermissionSetResponse, GenericErrors>\n    ) => void;\n}\n\nexport type getCurrentInstancePermissionSetErrors = GenericErrors;\n\nexport default new (class InstancePermissionSetClient extends TypedEmitter<IEvents> {\n    private _cachedInstancePermissionSet: Map<\n        number,\n        InternalStatus<Components.Schemas.InstancePermissionSetResponse, ErrorCode.OK>\n    > = new Map<\n        number,\n        InternalStatus<Components.Schemas.InstancePermissionSetResponse, ErrorCode.OK>\n    >();\n\n    private loadingInstancePermissionSetInfo: Map<number, boolean> = new Map<number, boolean>();\n\n    public constructor() {\n        super();\n\n        ServerClient.on(\"purgeCache\", () => {\n            this._cachedInstancePermissionSet.clear();\n        });\n    }\n\n    public async getCurrentInstancePermissionSet(\n        instanceid: number\n    ): Promise<\n        InternalStatus<\n            Components.Schemas.InstancePermissionSetResponse,\n            getCurrentInstancePermissionSetErrors\n        >\n    > {\n        await ServerClient.wait4Init();\n\n        if (this._cachedInstancePermissionSet.has(instanceid)) {\n            return this._cachedInstancePermissionSet.get(instanceid)!;\n        }\n\n        if (this.loadingInstancePermissionSetInfo.get(instanceid)) {\n            return await new Promise(resolve => {\n                const resolver = (\n                    user: InternalStatus<\n                        Components.Schemas.InstancePermissionSetResponse,\n                        GenericErrors\n                    >\n                ) => {\n                    resolve(user);\n                    this.removeListener(\"loadInstancePermissionSet\", resolver);\n                };\n                this.on(\"loadInstancePermissionSet\", resolver);\n            });\n        }\n\n        this.loadingInstancePermissionSetInfo.set(instanceid, true);\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.InstancePermissionSetController_Read({\n                Instance: instanceid\n            });\n        } catch (stat) {\n            const res = new InternalStatus<\n                Components.Schemas.InstancePermissionSetResponse,\n                GenericErrors\n            >({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n            this.emit(\"loadInstancePermissionSet\", res);\n            this.loadingInstancePermissionSetInfo.set(instanceid, false);\n            return res;\n        }\n\n        switch (response.status) {\n            case 200: {\n                const res = new InternalStatus<\n                    Components.Schemas.InstancePermissionSetResponse,\n                    ErrorCode.OK\n                >({\n                    code: StatusCode.OK,\n                    payload: response.data as Components.Schemas.InstancePermissionSetResponse\n                });\n\n                this._cachedInstancePermissionSet.set(instanceid, res);\n                this.emit(\"loadInstancePermissionSet\", res);\n                this.loadingInstancePermissionSetInfo.set(instanceid, false);\n                return res;\n            }\n            default: {\n                const res = new InternalStatus<\n                    Components.Schemas.InstancePermissionSetResponse,\n                    GenericErrors\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadInstancePermissionSet\", res);\n                this.loadingInstancePermissionSetInfo.set(instanceid, false);\n                return res;\n            }\n        }\n    }\n})();\n"],"sourceRoot":""}