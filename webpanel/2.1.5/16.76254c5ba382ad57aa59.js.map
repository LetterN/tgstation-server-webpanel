{"version":3,"sources":["webpack:///./src/components/utils/InputField.tsx","webpack:///./src/components/views/Instance/Config/InstanceSettings.tsx"],"names":["InputField","props","state","currentValue","defaultValue","random","Math","toString","changed","this","InputGroup","Prepend","className","Text","id","name","type","onChange","event","setEditLock","target","selectedOptions","value","setState","disabled","editLock","Object","values","enum","filter","val","isNaN","parseInt","map","possiblevalue","key","message","htmlFor","Form","Check","inline","custom","label","currentTarget","checked","FormControl","newValue","Fragment","Append","style","opacity","pointerEvents","onClick","fixedWidth","icon","React","Component","withRouter","loading","errors","error","prevState","Array","from","push","instance","response","InstanceClient","editInstance","code","StatusCode","OK","loadInstance","addError","_editInstance","Loading","text","checkIMFlag","flag","selfPermissionSet","instanceManagerRights","err","index","ErrorAlert","onClose","prev","newarr","undefined","newval","InstanceManagerRights","Rename","path","Relocate","chatBotLimit","SetChatBotLimit","autoUpdateInterval","SetAutoUpdate","ConfigurationType","configurationType","SetConfiguration"],"mappings":"w5CA4CqBA,E,sQACjB,WAAmBC,GAAe,a,4FAAA,UAC9B,cAAMA,IAEDC,MAAQ,CACTC,aAAcF,EAAMG,cAJM,E,8CAQD,WACvBC,EAASC,KAAKD,SAASE,WACvBC,EAAUC,KAAKP,MAAMC,eAAiBM,KAAKR,MAAMG,aAEvD,OACI,kBAACM,EAAA,EAAD,KACI,kBAACA,EAAA,EAAWC,QAAZ,CAAoBC,UAAU,8DAC1B,kBAACF,EAAA,EAAWG,KAAZ,CAAiBD,UAAS,oBAAeJ,EAAU,mBAAqB,KACpE,kBAAC,IAAD,CAAkBM,GAAE,iBAAYL,KAAKR,MAAMc,UAGnD,yBAAKH,UAAU,mDACU,SAApBH,KAAKR,MAAMe,KACR,4BACIJ,UAAS,yBAAoBJ,EAAU,mBAAqB,IAC5DS,SAAU,SAAAC,GACF,EAAKjB,MAAMkB,cAEPX,GACAU,EAAME,OAAOC,gBAAgB,GAAGC,QAC5B,EAAKrB,MAAMG,aAEf,EAAKH,MAAMkB,aAAY,GAEtBX,GACDU,EAAME,OAAOC,gBAAgB,GAAGC,QAC5B,EAAKrB,MAAMG,cAEf,EAAKH,MAAMkB,aAAY,IAI/B,EAAKI,SAAS,CACVpB,aAAce,EAAME,OAAOC,gBAAgB,GAAGC,SAGtDE,SAAUf,KAAKR,MAAMuB,WAAchB,GAAWC,KAAKR,MAAMwB,SACzDrB,aAAcK,KAAKR,MAAMG,cACxBsB,OAAOC,OAAOlB,KAAKR,MAAM2B,MACrBC,QAAO,SAAAC,GAAG,OAAIC,MAAMC,SAASF,OAC7BG,KAAI,SAAAC,GAAa,OACd,kBAAC,IAAD,CACIC,IAAKD,EACLpB,GAAE,iBAAY,EAAKb,MAAMc,KAAvB,YAA+BmB,KAChC,SAAAE,GAAO,OACJ,4BAAQd,MAAOY,GAAgBE,UAK/B,SAApB3B,KAAKR,MAAMe,KACX,2BACIqB,QAAShC,EACTO,UAAU,uFACV,kBAAC0B,EAAA,EAAKC,MAAN,CACIC,QAAM,EACNxB,KAAK,SACLyB,QAAM,EACN3B,GAAIT,EACJO,UAAU,SACV8B,MAAM,GACNzB,SAAU,SAAAC,GACF,EAAKjB,MAAMkB,cAEPX,GACAU,EAAMyB,cAAcC,UAAY,EAAK3C,MAAMG,aAE3C,EAAKH,MAAMkB,aAAY,GAEtBX,GACDU,EAAMyB,cAAcC,UAAY,EAAK3C,MAAMG,cAE3C,EAAKH,MAAMkB,aAAY,IAI/B,EAAKI,SAAS,CACVpB,aAAce,EAAMyB,cAAcC,WAG1CA,QAASnC,KAAKP,MAAMC,aACpBqB,SAAUf,KAAKR,MAAMuB,WAAchB,GAAWC,KAAKR,MAAMwB,YAIjE,kBAACoB,EAAA,EAAD,CACIJ,QAAM,EACNzB,KAA0B,QAApBP,KAAKR,MAAMe,KAAiB,SAAW,OAC7CJ,UAAS,yBAAoBJ,EAAU,mBAAqB,IAC5DS,SAAU,SAAAC,GACN,IAAM4B,EACiB,OAAnB,EAAK7C,MAAMe,KACLgB,SAASd,EAAMyB,cAAcrB,OAC7BJ,EAAMyB,cAAcrB,MAE1B,EAAKrB,MAAMkB,cACPX,GAAWsC,IAAa,EAAK7C,MAAMG,aACnC,EAAKH,MAAMkB,aAAY,GACfX,GAAWsC,IAAa,EAAK7C,MAAMG,cAC3C,EAAKH,MAAMkB,aAAY,IAI/B,EAAKI,SAAS,CACVpB,aAAc2C,KAGtBxB,MAAOb,KAAKP,MAAMC,aAClBqB,SAAUf,KAAKR,MAAMuB,WAAchB,GAAWC,KAAKR,MAAMwB,WAGjE,kBAAC,IAAMsB,SAAP,KACI,kBAACrC,EAAA,EAAWsC,OAAZ,CACIC,MACKzC,EAKK,GAJA,CACI0C,QAAS,EACTC,cAAe,QAI7BC,QAAS,WACD,EAAKnD,MAAMkB,aACX,EAAKlB,MAAMkB,aAAY,GAG3B,EAAKI,SAAS,CACVpB,aAAc,EAAKF,MAAMG,iBAGjC,kBAACM,EAAA,EAAWG,KAAZ,KACI,kBAAC,IAAD,CAAiBwC,YAAU,EAACC,KAAK,WAGzC,kBAAC5C,EAAA,EAAWsC,OAAZ,CACIC,MACKzC,EAKK,GAJA,CACI0C,QAAS,EACTC,cAAe,QAI7BC,QAAS,WACL,OAAQ,EAAKnD,MAAMe,MACf,IAAK,MAGL,IAAK,MAGL,IAAK,OAGL,IAAK,OACD,EAAKf,MAAMgB,SAAS,EAAKf,MAAMC,iBAI3C,kBAACO,EAAA,EAAWG,KAAZ,KACI,kBAAC,IAAD,CAAiBwC,YAAU,EAACC,KAAK,oB,8BAzKzBC,IAAMC,W,igEClB/BC,sBAAU,a,kOAAA,U,QAAA,SAEjB,WAAmBxD,GAAe,a,4FAAA,UAC9B,cAAMA,IAEDC,MAAQ,CACTwD,SAAS,EACTjC,UAAU,EACVkC,OAAQ,IANkB,EAFjB,O,EAAA,G,EAAA,gCAYAC,GACbnD,KAAKc,UAAS,SAAAsC,GACV,IAAMF,EAASG,MAAMC,KAAKF,EAAUF,QAEpC,OADAA,EAAOK,KAAKJ,GACL,CACHD,eAjBK,4B,EAAA,UAuBbM,GAEA,IAAMC,QAAiBC,IAAeC,aAAf,OAChBH,GADgB,IAEnBnD,GAAIL,KAAKR,MAAMgE,SAASnD,MAExBoD,EAASG,OAASC,IAAWC,IAC7B9D,KAAKc,SAAS,CACVmC,SAAS,UAEPjD,KAAKR,MAAMuE,eACjB/D,KAAKc,SAAS,CACVmC,SAAS,KAGbjD,KAAKgE,SAASP,EAASN,QAtCd,E,8KAAA,iFA0CIK,GACZxD,KAAKiE,cAAcT,KA3CX,+BA8CgB,WAC7B,GAAIxD,KAAKP,MAAMwD,QACX,OAAO,kBAACiB,EAAA,EAAD,CAASC,KAAK,qBAGzB,IAAMC,EAAc,SAACC,GACjB,OAAO,EAAK7E,MAAM8E,kBAAkBC,sBAAwBF,GAG1D3D,EAAc,SAACG,GACjB,EAAKC,SAAS,CACVE,SAAUH,KAIlB,OACI,yBAAKV,UAAU,eACVH,KAAKP,MAAMyD,OAAO1B,KAAI,SAACgD,EAAKC,GACzB,GAAKD,EACL,OACI,kBAACE,EAAA,EAAD,CACIhD,IAAK+C,EACLtB,MAAOqB,EACPG,QAAS,kBACL,EAAK7D,UAAS,SAAA8D,GACV,IAAMC,EAASxB,MAAMC,KAAKsB,EAAK1B,QAE/B,OADA2B,EAAOJ,QAASK,EACT,CACH5B,OAAQ2B,YAQhC,kBAAC,EAAD,CACIvE,KAAK,gBACLX,aAAcK,KAAKR,MAAMgE,SAASlD,KAClCC,KAAK,MACLC,SAAU,SAAAuE,GACN,EAAKpB,aAAa,CAAErD,KAAMyE,KAE9BhE,UAAWqD,EAAYY,IAAsBC,QAC7CvE,YAAaA,EACbM,SAAUhB,KAAKP,MAAMuB,WAEzB,kBAAC,EAAD,CACIV,KAAK,gBACLX,aAAcK,KAAKR,MAAMgE,SAAS0B,KAClC3E,KAAK,MACLC,SAAU,SAAAuE,GACN,EAAKpB,aAAa,CAAEuB,KAAMH,KAE9BhE,UAAWqD,EAAYY,IAAsBG,UAC7CzE,YAAaA,EACbM,SAAUhB,KAAKP,MAAMuB,WAEzB,kBAAC,EAAD,CACIV,KAAK,wBACLX,aAAcK,KAAKR,MAAMgE,SAAS4B,aAClC7E,KAAK,MACLC,SAAU,SAAAuE,GACN,EAAKpB,aAAa,CAAEyB,aAAcL,KAEtChE,UAAWqD,EAAYY,IAAsBK,iBAC7C3E,YAAaA,EACbM,SAAUhB,KAAKP,MAAMuB,WAEzB,kBAAC,EAAD,CACIV,KAAK,sBACLX,aAAcK,KAAKR,MAAMgE,SAAS8B,mBAClC/E,KAAK,MACLC,SAAU,SAAAuE,GACN,EAAKpB,aAAa,CACd2B,mBAAoBP,KAG5BhE,UAAWqD,EAAYY,IAAsBO,eAC7C7E,YAAaA,EACbM,SAAUhB,KAAKP,MAAMuB,WAEzB,kBAAC,EAAD,CACIV,KAAK,oBACLX,aAAc6F,IAAkBxF,KAAKR,MAAMgE,SAASiC,mBACpDlF,KAAK,OACLY,KAAMqE,IACNhF,SAAU,SAAAuE,GACN,EAAKpB,aAAa,CAEd8B,kBAAmBD,IAAkBT,MAG7ChE,UAAWqD,EAAYY,IAAsBU,kBAC7ChF,YAAaA,EACbM,SAAUhB,KAAKP,MAAMuB,iB,2BA7IpB,GACU8B,IAAMC","file":"16.76254c5ba382ad57aa59.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport { FormattedMessage } from \"react-intl\";\n\ninterface IState {\n    currentValue: string | boolean | number;\n}\n\ntype IProps = {\n    name: string;\n    disabled?: boolean;\n    setEditLock?: (value: boolean) => void;\n    editLock?: boolean;\n} & (\n    | {\n          name: string;\n          defaultValue: boolean;\n          onChange: (newvalue: boolean) => void;\n          type: \"bool\";\n      }\n    | {\n          name: string;\n          defaultValue: number;\n          onChange: (newvalue: number) => void;\n          type: \"num\";\n      }\n    | {\n          name: string;\n          defaultValue: string;\n          onChange: (newvalue: string) => void;\n          type: \"str\";\n      }\n    | {\n          name: string;\n          defaultValue: string | number;\n          onChange: (newvalue: string) => void;\n          type: \"enum\";\n          enum: Record<string, string | number>;\n      }\n);\n\nexport default class InputField extends React.Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            currentValue: props.defaultValue\n        };\n    }\n\n    public render(): React.ReactNode {\n        const random = Math.random().toString();\n        const changed = this.state.currentValue !== this.props.defaultValue;\n\n        return (\n            <InputGroup>\n                <InputGroup.Prepend className=\"w-40 flex-grow-1 flex-xl-grow-0 overflow-auto mb-2 mb-xl-0\">\n                    <InputGroup.Text className={`flex-fill ${changed ? \"font-weight-bold\" : \"\"}`}>\n                        <FormattedMessage id={`fields.${this.props.name}`} />\n                    </InputGroup.Text>\n                </InputGroup.Prepend>\n                <div className=\"flex-grow-1 w-100 w-xl-auto d-flex mb-3 mb-xl-0\">\n                    {this.props.type === \"enum\" ? (\n                        <select\n                            className={`flex-fill mb-0 ${changed ? \"font-weight-bold\" : \"\"}`}\n                            onChange={event => {\n                                if (this.props.setEditLock) {\n                                    if (\n                                        changed &&\n                                        event.target.selectedOptions[0].value ===\n                                            this.props.defaultValue\n                                    ) {\n                                        this.props.setEditLock(false);\n                                    } else if (\n                                        !changed &&\n                                        event.target.selectedOptions[0].value !==\n                                            this.props.defaultValue\n                                    ) {\n                                        this.props.setEditLock(true);\n                                    }\n                                }\n\n                                this.setState({\n                                    currentValue: event.target.selectedOptions[0].value\n                                });\n                            }}\n                            disabled={this.props.disabled || (!changed && this.props.editLock)}\n                            defaultValue={this.props.defaultValue}>\n                            {Object.values(this.props.enum)\n                                .filter(val => isNaN(parseInt(val as string)))\n                                .map(possiblevalue => (\n                                    <FormattedMessage\n                                        key={possiblevalue}\n                                        id={`fields.${this.props.name}.${possiblevalue}`}>\n                                        {message => (\n                                            <option value={possiblevalue}>{message}</option>\n                                        )}\n                                    </FormattedMessage>\n                                ))}\n                        </select>\n                    ) : this.props.type === \"bool\" ? (\n                        <label\n                            htmlFor={random}\n                            className=\"d-flex justify-content-center align-content-center flex-grow-1 w-100 w-xl-auto mb-0\">\n                            <Form.Check\n                                inline\n                                type=\"switch\"\n                                custom\n                                id={random}\n                                className=\"m-auto\"\n                                label=\"\"\n                                onChange={event => {\n                                    if (this.props.setEditLock) {\n                                        if (\n                                            changed &&\n                                            event.currentTarget.checked === this.props.defaultValue\n                                        ) {\n                                            this.props.setEditLock(false);\n                                        } else if (\n                                            !changed &&\n                                            event.currentTarget.checked !== this.props.defaultValue\n                                        ) {\n                                            this.props.setEditLock(true);\n                                        }\n                                    }\n\n                                    this.setState({\n                                        currentValue: event.currentTarget.checked\n                                    });\n                                }}\n                                checked={this.state.currentValue as boolean}\n                                disabled={this.props.disabled || (!changed && this.props.editLock)}\n                            />\n                        </label>\n                    ) : (\n                        <FormControl\n                            custom\n                            type={this.props.type === \"num\" ? \"number\" : \"text\"}\n                            className={`flex-fill mb-0 ${changed ? \"font-weight-bold\" : \"\"}`}\n                            onChange={event => {\n                                const newValue =\n                                    this.props.type == \"num\"\n                                        ? parseInt(event.currentTarget.value)\n                                        : event.currentTarget.value;\n\n                                if (this.props.setEditLock) {\n                                    if (changed && newValue === this.props.defaultValue) {\n                                        this.props.setEditLock(false);\n                                    } else if (!changed && newValue !== this.props.defaultValue) {\n                                        this.props.setEditLock(true);\n                                    }\n                                }\n\n                                this.setState({\n                                    currentValue: newValue\n                                });\n                            }}\n                            value={this.state.currentValue as string | number}\n                            disabled={this.props.disabled || (!changed && this.props.editLock)}\n                        />\n                    )}\n                    <React.Fragment>\n                        <InputGroup.Append\n                            style={\n                                !changed\n                                    ? {\n                                          opacity: 0,\n                                          pointerEvents: \"none\"\n                                      }\n                                    : {}\n                            }\n                            onClick={() => {\n                                if (this.props.setEditLock) {\n                                    this.props.setEditLock(false);\n                                }\n\n                                this.setState({\n                                    currentValue: this.props.defaultValue\n                                });\n                            }}>\n                            <InputGroup.Text>\n                                <FontAwesomeIcon fixedWidth icon=\"undo\" />\n                            </InputGroup.Text>\n                        </InputGroup.Append>\n                        <InputGroup.Append\n                            style={\n                                !changed\n                                    ? {\n                                          opacity: 0,\n                                          pointerEvents: \"none\"\n                                      }\n                                    : {}\n                            }\n                            onClick={() => {\n                                switch (this.props.type) {\n                                    case \"str\":\n                                        this.props.onChange(this.state.currentValue as string);\n                                        break;\n                                    case \"num\":\n                                        this.props.onChange(this.state.currentValue as number);\n                                        break;\n                                    case \"bool\":\n                                        this.props.onChange(this.state.currentValue as boolean);\n                                        break;\n                                    case \"enum\":\n                                        this.props.onChange(this.state.currentValue as string);\n                                        break;\n                                }\n                            }}>\n                            <InputGroup.Text>\n                                <FontAwesomeIcon fixedWidth icon=\"check\" />\n                            </InputGroup.Text>\n                        </InputGroup.Append>\n                    </React.Fragment>\n                </div>\n            </InputGroup>\n        );\n    }\n}\n","import React from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    ConfigurationType,\n    InstanceManagerRights\n} from \"../../../../ApiClient/generatedcode/_enums\";\nimport { Components } from \"../../../../ApiClient/generatedcode/_generated\";\nimport InstanceClient from \"../../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport InputField from \"../../../utils/InputField\";\nimport Loading from \"../../../utils/Loading\";\n\ninterface IProps extends RouteComponentProps {\n    instance: Components.Schemas.InstanceResponse;\n    loadInstance: () => unknown;\n    selfPermissionSet: Components.Schemas.PermissionSet;\n}\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    loading: boolean;\n    editLock: boolean;\n}\n\nexport default withRouter(\n    class InstanceSettings extends React.Component<IProps, IState> {\n        public constructor(props: IProps) {\n            super(props);\n\n            this.state = {\n                loading: false,\n                editLock: false,\n                errors: []\n            };\n        }\n\n        private addError(error: InternalError<ErrorCode>): void {\n            this.setState(prevState => {\n                const errors = Array.from(prevState.errors);\n                errors.push(error);\n                return {\n                    errors\n                };\n            });\n        }\n\n        private async _editInstance(\n            instance: Omit<Components.Schemas.InstanceUpdateRequest, \"id\">\n        ) {\n            const response = await InstanceClient.editInstance({\n                ...instance,\n                id: this.props.instance.id\n            });\n            if (response.code === StatusCode.OK) {\n                this.setState({\n                    loading: true\n                });\n                await this.props.loadInstance();\n                this.setState({\n                    loading: false\n                });\n            } else {\n                this.addError(response.error);\n            }\n        }\n\n        private editInstance(instance: Omit<Components.Schemas.InstanceUpdateRequest, \"id\">) {\n            void this._editInstance(instance);\n        }\n\n        public render(): React.ReactNode {\n            if (this.state.loading) {\n                return <Loading text=\"loading.instance\" />;\n            }\n\n            const checkIMFlag = (flag: InstanceManagerRights) => {\n                return this.props.selfPermissionSet.instanceManagerRights & flag;\n            };\n\n            const setEditLock = (value: boolean) => {\n                this.setState({\n                    editLock: value\n                });\n            };\n\n            return (\n                <div className=\"text-center\">\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n\n                    <InputField\n                        name=\"instance.name\"\n                        defaultValue={this.props.instance.name}\n                        type=\"str\"\n                        onChange={newval => {\n                            this.editInstance({ name: newval });\n                        }}\n                        disabled={!checkIMFlag(InstanceManagerRights.Rename)}\n                        setEditLock={setEditLock}\n                        editLock={this.state.editLock}\n                    />\n                    <InputField\n                        name=\"instance.path\"\n                        defaultValue={this.props.instance.path}\n                        type=\"str\"\n                        onChange={newval => {\n                            this.editInstance({ path: newval });\n                        }}\n                        disabled={!checkIMFlag(InstanceManagerRights.Relocate)}\n                        setEditLock={setEditLock}\n                        editLock={this.state.editLock}\n                    />\n                    <InputField\n                        name=\"instance.chatbotlimit\"\n                        defaultValue={this.props.instance.chatBotLimit}\n                        type=\"num\"\n                        onChange={newval => {\n                            this.editInstance({ chatBotLimit: newval });\n                        }}\n                        disabled={!checkIMFlag(InstanceManagerRights.SetChatBotLimit)}\n                        setEditLock={setEditLock}\n                        editLock={this.state.editLock}\n                    />\n                    <InputField\n                        name=\"instance.autoupdate\"\n                        defaultValue={this.props.instance.autoUpdateInterval}\n                        type=\"num\"\n                        onChange={newval => {\n                            this.editInstance({\n                                autoUpdateInterval: newval\n                            });\n                        }}\n                        disabled={!checkIMFlag(InstanceManagerRights.SetAutoUpdate)}\n                        setEditLock={setEditLock}\n                        editLock={this.state.editLock}\n                    />\n                    <InputField\n                        name=\"instance.filemode\"\n                        defaultValue={ConfigurationType[this.props.instance.configurationType]}\n                        type=\"enum\"\n                        enum={ConfigurationType}\n                        onChange={newval => {\n                            this.editInstance({\n                                // @ts-expect-error typescript isnt a fan of using enums like this\n                                configurationType: ConfigurationType[newval] as 0 | 1 | 2\n                            });\n                        }}\n                        disabled={!checkIMFlag(InstanceManagerRights.SetConfiguration)}\n                        setEditLock={setEditLock}\n                        editLock={this.state.editLock}\n                    />\n                </div>\n            );\n        }\n    }\n);\n"],"sourceRoot":""}